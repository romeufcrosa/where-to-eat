// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import entities "github.com/romeufcrosa/where-to-eat/domain/entities"
import maps "googlemaps.github.io/maps"
import mock "github.com/stretchr/testify/mock"

// GeoLocator is an autogenerated mock type for the GeoLocator type
type GeoLocator struct {
	mock.Mock
}

// Geolocate provides a mock function with given fields: ctx, accessPoints
func (_m *GeoLocator) Geolocate(ctx context.Context, accessPoints []maps.WiFiAccessPoint) (*maps.GeolocationResult, error) {
	ret := _m.Called(ctx, accessPoints)

	var r0 *maps.GeolocationResult
	if rf, ok := ret.Get(0).(func(context.Context, []maps.WiFiAccessPoint) *maps.GeolocationResult); ok {
		r0 = rf(ctx, accessPoints)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*maps.GeolocationResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []maps.WiFiAccessPoint) error); ok {
		r1 = rf(ctx, accessPoints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRestaurants provides a mock function with given fields: ctx, searchRequest
func (_m *GeoLocator) ListRestaurants(ctx context.Context, searchRequest *maps.NearbySearchRequest) (maps.PlacesSearchResponse, error) {
	ret := _m.Called(ctx, searchRequest)

	var r0 maps.PlacesSearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *maps.NearbySearchRequest) maps.PlacesSearchResponse); ok {
		r0 = rf(ctx, searchRequest)
	} else {
		r0 = ret.Get(0).(maps.PlacesSearchResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *maps.NearbySearchRequest) error); ok {
		r1 = rf(ctx, searchRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceDetails provides a mock function with given fields: ctx, detailsRequest
func (_m *GeoLocator) PlaceDetails(ctx context.Context, detailsRequest *maps.PlaceDetailsRequest) (entities.Place, error) {
	ret := _m.Called(ctx, detailsRequest)

	var r0 entities.Place
	if rf, ok := ret.Get(0).(func(context.Context, *maps.PlaceDetailsRequest) entities.Place); ok {
		r0 = rf(ctx, detailsRequest)
	} else {
		r0 = ret.Get(0).(entities.Place)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *maps.PlaceDetailsRequest) error); ok {
		r1 = rf(ctx, detailsRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
